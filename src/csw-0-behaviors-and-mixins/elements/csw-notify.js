// Generated by LiveScript 1.5.0
/**
 * @package CleverStyle Widgets
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  var promise;
  promise = new Promise(csw.behaviors.ready._when_ready);
  csw.behaviors.cswNotify = [
    csw.behaviors.ready, {
      properties: {
        bottom: {
          reflectToAttribute: true,
          type: Boolean
        },
        content: String,
        error: {
          reflectToAttribute: true,
          type: Boolean
        },
        left: {
          reflectToAttribute: true,
          type: Boolean
        },
        noIcon: {
          reflectToAttribute: true,
          type: Boolean
        },
        right: {
          reflectToAttribute: true,
          type: Boolean
        },
        selectable: {
          reflectToAttribute: true,
          type: Boolean
        },
        show: {
          reflectToAttribute: true,
          type: Boolean
        },
        success: {
          reflectToAttribute: true,
          type: Boolean
        },
        timeout: Number,
        top: {
          reflectToAttribute: true,
          type: Boolean
        },
        warning: {
          reflectToAttribute: true,
          type: Boolean
        }
      },
      attached: function(){
        this.last_node = this.parentNode;
        if (!this.parentNode.matches('html')) {
          document.documentElement.insertBefore(this, document.querySelector(this.is));
          return;
        }
        if (!this.bottom && !this.top) {
          this.top = true;
        }
        this.offsetLeft;
        this._show();
      },
      _tap: function(e){
        if (!this.selectable || e.target === this.$.content || e.target === this.$.icon) {
          this._hide();
        }
      },
      _show: function(){
        var this$ = this;
        promise = promise.then(function(){
          if (this$.content) {
            this$.innerHTML = this$.content;
          }
          this$.show = true;
          this$._update_position();
          this$.fire('show');
          return new Promise(function(resolve){
            setTimeout(function(){
              if (this$.timeout) {
                setTimeout(this$._hide.bind(this$), this$.timeout * 1000);
              }
              resolve();
            }, this$._transition_duration());
          });
        });
      },
      _hide: function(){
        var this$ = this;
        promise = promise.then(function(){
          this$.show = false;
          this$._update_position();
          this$.fire('hide');
          return new Promise(function(resolve){
            setTimeout(function(){
              var ref$;
              if ((ref$ = this$.parentNode) != null) {
                ref$.removeChild(this$);
              }
              resolve();
            }, this$._transition_duration());
          });
        });
      },
      _get_similar: function(){
        var _is, bottom, left, right, top, this$ = this;
        _is = this.is;
        bottom = this.bottom;
        left = this.left;
        right = this.right;
        top = this.top;
        return Array.from(document.querySelector('html').children).filter(function(element){
          return element.is === _is && element.bottom === bottom && element.left === left && element.right === right && element.top === top && element.show;
        });
      },
      _update_position: function(callback){
        var children, i$, len$, i, current, previous;
        children = this._get_similar();
        for (i$ = 0, len$ = children.length; i$ < len$; ++i$) {
          i = i$;
          current = children[i$];
          previous = children[i - 1];
          current._update_own_position(previous);
        }
      },
      _update_own_position: function(previous){
        var previous_bottom, previous_height, previous_top;
        if (previous) {
          previous_bottom = parseFloat(previous.style.marginBottom || 0);
          previous_height = parseFloat(getComputedStyle(previous).height);
          previous_top = parseFloat(previous.style.marginTop || 0);
        } else {
          previous_bottom = 0;
          previous_height = 0;
          previous_top = 0;
        }
        if (this.top) {
          this.style.marginTop = previous_top + previous_height + 'px';
        } else {
          this.style.marginBottom = previous_bottom + previous_height + 'px';
        }
      },
      _transition_duration: function(){
        var transitionDuration;
        transitionDuration = getComputedStyle(this).transitionDuration;
        if (transitionDuration.substr(-2) === 'ms') {
          return parseFloat(transitionDuration);
        } else {
          return parseFloat(transitionDuration) * 1000;
        }
      }
    }
  ];
}).call(this);
