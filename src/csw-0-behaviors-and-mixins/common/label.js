// Generated by LiveScript 1.5.0
/**
 * @package CleverStyle Widgets
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  csw.behaviors.label = {
    properties: {
      active: {
        notify: true,
        observer: '_active_changed',
        reflectToAttribute: true,
        type: Boolean
      },
      value: {
        notify: true,
        observer: '_value_changed',
        type: String
      }
    },
    attached: function(){
      var inputs, i$, len$, input, this$ = this;
      (function(){
        var next_node, ref$;
        next_node = this$.nextSibling;
        if (next_node && next_node.nodeType === Node.TEXT_NODE && ((ref$ = next_node.nextSibling) != null && (typeof ref$.matches == 'function' && ref$.matches(this$.is)))) {
          next_node.parentNode.removeChild(next_node);
        }
      })();
      this.local_input = this.querySelector('input');
      this.local_input.label = this;
      this.active = this.local_input.checked;
      inputs = this._get_inputs();
      if (this.value !== undefined) {
        this._value_changed(this.value);
      }
      for (i$ = 0, len$ = inputs.length; i$ < len$; ++i$) {
        input = inputs[i$];
        (fn$.call(this, input));
      }
      this.local_input.addEventListener('focus', function(){
        this$.focus = true;
      });
      this.local_input.addEventListener('blur', function(){
        this$.focus = false;
      });
      function fn$(input){
        var this$ = this;
        input.addEventListener('change', function(){
          if (this$.local_input.type === 'radio') {
            this$.value = input.value;
            this$.active = this$.local_input.value == input.value;
            this$.local_input.checked = this$.local_input.value == input.value;
          } else {
            this$.active = !this$.active;
          }
        });
        if (input.checked) {
          this.value = input.value;
        }
      }
    },
    _get_inputs: function(){
      if (this.local_input.name) {
        return this.parentNode.querySelectorAll('input[name="' + this.local_input.name + '"]');
      } else {
        return this._inputs_around();
      }
    },
    _inputs_around: function(){
      var inputs, label, input;
      inputs = [];
      inputs.push(this.local_input);
      label = this;
      while (label = label.previousElementSibling) {
        if (!label.matches(this.is)) {
          break;
        }
        input = label.querySelector('input');
        if (!input) {
          break;
        }
        inputs.push(input);
      }
      label = this;
      while (label = label.nextElementSibling) {
        if (!label.matches(this.is)) {
          break;
        }
        input = label.querySelector('input');
        if (!input) {
          break;
        }
        inputs.push(input);
      }
      return inputs;
    },
    _active_changed: function(active){
      if (active === undefined) {
        return;
      }
      if (this.local_input.checked === active) {
        return;
      }
      if (this.local_input.type === 'radio') {
        if (active) {
          this.click();
        }
      } else {
        this.local_input.checked = active;
      }
    },
    _value_changed: function(value){
      var i$, ref$, len$, input, state, ref1$;
      if (value === undefined) {
        return;
      }
      if (this.local_input) {
        for (i$ = 0, len$ = (ref$ = this._get_inputs()).length; i$ < len$; ++i$) {
          input = ref$[i$];
          state = input.value == value;
          input.checked = state;
          if ((ref1$ = input.label) != null) {
            ref1$.active = state;
          }
        }
      }
    }
  };
}).call(this);
